
1. with projection only in local data
const pipeline = [
            {
                $match: { stdEmail: studentEmail }
            },
            {
                $project: {
                    class_ID: { $toObjectId: "$class_ID" } ,// Convert class_ID to ObjectId
                    stdEmail : 1,
                    std_ID : 1,
                    Joindate :1
                }
            },
            {
                $lookup: {
                    from: 'class-data',
                    localField: "class_ID",
                    foreignField: "_id",
                    as: "classData"
                },
                
            },
            {
                $sort: { _id: -1 }
            }
        ];


2. with projection both inside the local data & foreign data

        const pipeline = [
            {
                $match: { stdEmail: studentEmail }
            },
            {
                $project: {
                    class_ID: { $toObjectId: "$class_ID" }, // Convert class_ID to ObjectId
                    stdEmail: 1,
                    std_ID: 1,
                    Joindate: 1
                }
            },
            {
                $lookup: {
                    from: 'class-data',
                    let: { classId: "$class_ID" }, // Create a variable for the class_ID
                    pipeline: [
                        {
                            $match: {
                                $expr: {
                                    $eq: ["$_id", "$$classId"]
                                }
                            }
                        },
                        {
                            $project: {
                                className: 1 // Include only className from the foreign collection
                            }
                        }
                    ],
                    as: "classData"
                }
            },
            {
                $sort: { _id: -1 }
            }
        ];




const getAllMyPurchasesClasses_For_Student = async (req, res) => {
    try {
        const studentEmail = req.data?.email;
        console.log("Student Email:", studentEmail);

        if (!studentEmail) {
            return res.status(401).send({ message: "Unauthorized" });
        }

        // const pipeline = [
        //     {
        //         $match: { stdEmail: studentEmail }
        //     },
        //     {
        //         $project: {
        //             class_ID: { $toObjectId: "$class_ID" } ,// Convert class_ID to ObjectId
        //             stdEmail : 1,
        //             std_ID : 1,
        //             Joindate :1
        //         }
        //     },
        //     {
        //         $lookup: {
        //             from: 'class-data',
        //             localField: "class_ID",
        //             foreignField: "_id",
        //             as: "classData"
        //         },
                
        //     },
        //     {
        //         $sort: { _id: -1 }
        //     }
        // ];


        const pipeline = [
            {
                $match: { stdEmail: studentEmail }
            },
            {
                $project: {
                    class_ID: { $toObjectId: "$class_ID" }, // Convert class_ID to ObjectId
                    stdEmail: 1,
                    std_ID: 1,
                    Joindate: 1,
                    InstructorName:1,
                    InstructorEmail :1
                }
            },
            {
                $lookup: {
                    from: 'class-data',
                    let: { classId: "$class_ID" }, // Create a variable for the class_ID
                    pipeline: [
                        {
                            $match: {
                                $expr: {
                                    $eq: ["$_id", "$$classId"]
                                }
                            }
                        },
                        {
                            $project: {
                                className: 1 ,// Include only className from the foreign collection
                                videoURL: 1 ,// Include only className from the foreign collection
                                photoURL: 1, // Include only className from the foreign collection
                    

                            }
                        }
                    ],
                    as: "classData"
                }
            },
            {
                $sort: { _id: -1 }
            }
        ];

        // Debug log: Output the pipeline to ensure it's correct
        console.log("Aggregation Pipeline:", JSON.stringify(pipeline, null, 2));

        const classes = await enrolledStudentOfClassCollection.aggregate(pipeline).toArray();

        // Debug log: Output the result of the aggregation
        console.log("Aggregation Result:", JSON.stringify(classes, null, 2));

        if (classes && classes.length > 0) {
            // You have retrieved the purchased classes with additional data from classCollection.
            res.status(200).send(classes);
        } else {
            console.log('No purchased classes found');
            // If no classes are found, you can send an appropriate message.
            res.status(404).send({ message: "No purchased classes found" });
        }


      
    } catch (e) {
        console.error(e);
        // Bad Request: Server error or client sent an invalid request
        res.status(500).send({ message: "Bad Request: getAllMyPurchasesClasses_For_Student Server error or invalid request" });
    }
}

code data in H:\0.01 REACT\Milestone 12\Cinematic Arts Oasis\cinematic-arts-oasis-server\controller\ClassController.js



3. get with both projeciton and then return only in array

// get all the followers of instructor 
const getFollowerOFInstructor = async (insIDToMatch) => {
    // Assuming userData?._id contains the specific insID you want to match

    console.log(insIDToMatch, '---------------------------------------------------------------------------------')

    const followPipeline = [
        {
            $match: { insID: insIDToMatch }
        },
        {
            $project: {
                stdID: { $toObjectId: "$stdID" }, // Convert stdID to ObjectId
                insID: { $toObjectId: "$insID" }, // Convert insID to ObjectId
                _id: 1
            }
        },
        {
            $lookup: {
                from: "all-user-data",
                localField: "stdID",
                foreignField: "_id",
                as: "followData"
            }
        },
        {
            $unwind: "$followData" //unwind the follow data array
        },
        {
            $project: {
                _id: "$followData._id",
                name: "$followData.name",
                phone: "$followData.phone",
                email: "$followData.email",
                firebase_UID: "$followData.firebase_UID",

            }
        },

    ];

    const followers = await followCollection.aggregate(followPipeline).toArray();

    return followers;

}


